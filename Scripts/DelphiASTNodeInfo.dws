procedure VisualizeNode(Node: TSyntaxNode; Level: Integer);
var
  NodeInfo: String;
begin
  // build node information
  NodeInfo := '(' + IntToStr(Node.Line) + ', ' + IntToStr(Node.Col) + ')'; 
  if Node.HasAttribute(anName) then
    NodeInfo := Node.GetAttribute(anName) + ' ' + NodeInfo;
  if Node.HasAttribute(anType) then
    NodeInfo := Node.GetAttribute(anType) + ' ' + NodeInfo;
(*
  if Node.HasAttribute('name') then
    NodeInfo := Node.GetAttribute('name') + ' ' + NodeInfo;
*)
  NodeInfo := SyntaxNodeTypeToName(Node.&Type) + ': ' + NodeInfo;   

  // indention
  NodeInfo := DupeString(' ', 2 * Level) + NodeInfo; 

  // show node info
  PrintLn(NodeInfo);

  for var Index := 0 to Node.ChildNodeCount - 1 do
    VisualizeNode(Node.ChildNode[Index], Level + 1);
end;

var RootNode := GetAbstractSyntaxTree;

if Assigned(RootNode) then
  VisualizeNode(GetAbstractSyntaxTree, 0);
